import sys
from datetime import datetime

# ЗАВДАННЯ 3
# Розробіть Python-скрипт для аналізу файлів логів. Скрипт повинен вміти читати лог-файл, переданий як аргумент командного рядка, і виводити статистику
# за рівнями логування наприклад, INFO, ERROR, DEBUG. Також користувач може вказати рівень логування як другий аргумент командного рядка, щоб отримати 
# всі записи цього рівня.



# Функція для розбору рядка логу та повернення словника
def parse_log_line(line: str) -> dict:
    # Розбити рядок логу на частини, обмежуючи до 3 розділів
    parts = line.split(' ', 3)
    # Конвертувати рядок мітки часу у об'єкт datetime
    timestamp = datetime.strptime(parts[0] + ' ' + parts[1], '%Y-%m-%d %H:%M:%S')
    
    # Виділити рівень логу та повідомлення, видаливши зайві пробіли на початку та в кінці
    level = parts[2]
    message = parts[3].strip()
    
    # Повернути словник з міткою часу, рівнем логу та повідомленням
    return {'timestamp': timestamp, 'level': level, 'message': message}

# Функція для завантаження логів з файлу та повернення списку словників логів
def load_logs(file_path: str) -> list:
    # Ініціалізувати порожній список для збереження логів
    logs = []
    try:
        # Відкрити файл та прочитати кожен рядок
        with open(file_path, 'r') as file:
            for line in file:
                # Розібрати кожен рядок логу та додати результат до списку logs
                logs.append(parse_log_line(line))
    except FileNotFoundError:
        # Обробити помилку відсутності файлу, вивести повідомлення про помилку та вийти із програми з кодом 1
        print(f"Помилка: Файл '{file_path}' не знайдено.")
        sys.exit(1)
    except Exception as e:
        # Обробити інші винятки, вивести повідомлення про помилку та вийти із програми з кодом 1
        print(f"Помилка: {e}")
        sys.exit(1)
    # Повернути список logs
    return logs

# Функція для фільтрації логів за рівнем логу та повернення відфільтрованого списку
def filter_logs_by_level(logs: list, level: str) -> list:
    # Використовувати списковий вираз для фільтрації логів за вказаним рівнем логу
    return [log for log in logs if log['level'] == level]

# Функція для підрахунку кількості логів для кожного рівня логу та повернення словника з кількістю
def count_logs_by_level(logs: list) -> dict:
    # Ініціалізувати словник з кількістю для кожного рівня логу
    counts = {'INFO': 0, 'DEBUG': 0, 'ERROR': 0, 'WARNING': 0}
    # Пройтися по логах та інкрементувати кількість для кожного рівня логу
    for log in logs:
        counts[log['level']] += 1
    # Повернути словник з кількістю
    return counts

# Функція для виведення кількостей логів у відформатованій таблиці
def display_log_counts(counts: dict):
    # Вивести заголовок для таблиці кількостей логів
    print("Рівень логування | Кількість")
    print("-----------------|----------")
    # Пройтися по рівнях логу та їх кількостях, виводячи кожен рядок
    for level, count in counts.items():
        print(f"{level.ljust(17)}| {str(count).rjust(9)}")

# Основний блок для виконання, коли скрипт запускається
if __name__ == "__main__":
    # Перевірити, чи надано правильну кількість аргументів командного рядка
    if len(sys.argv) < 2:
        # Вивести повідомлення про користування та вийти з кодом 1, якщо аргументів недостатньо
        print("Використання: python main.py /path/to/logfile.log [log_level]")
        sys.exit(1)

    # Видобути шлях до файлу з аргументів командного рядка
    file_path = sys.argv[1]
    
    # Завантажити логи з вказаного файлу
    logs = load_logs(file_path)

    # Перевірити, чи вказано рівень логу в аргументах командного рядка
    if len(sys.argv) == 3:
        # Видобути рівень логу та відфільтрувати логи відповідно
        log_level = sys.argv[2]
        filtered_logs = filter_logs_by_level(logs, log_level.upper())
        
        # Підрахувати та вивести кількості логів для відфільтровованих логів
        counts = count_logs_by_level(filtered_logs)
        display_log_counts(counts)
    else:
        # Підрахувати та вивести кількості логів для всіх логів
        counts = count_logs_by_level(logs)
        display_log_counts(counts)


