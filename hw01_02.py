
# ЗАВДАННЯ 1

# Реалізуйте функцію caching_fibonacci, яка створює та використовує кеш для зберігання і повторного використання вже обчислених значень чисел Фібоначчі.

def caching_fibonacci():
    # Створення пустого словника для кешування проміжних результатів
    cache = {}
    
    def fibonacci(n):
        # Базовий випадок: якщо n менше або дорівнює 0, повертаємо 0
        if n <= 0:
            return 0
        # Базовий випадок: якщо n дорівнює 1, повертаємо 1
        if n == 1:
            return 1
        
        # Перевірка, чи вже є значення для n в кеші
        n_in_cache = cache.get(n, None)
        
        # Якщо значення для n вже є в кеші, повертаємо його
        if n_in_cache:
            return cache[n]
        
        # Якщо значення відсутнє в кеші, викликаємо рекурсивно для n - 1 та n - 2
        # Обчислюємо їхню суму та зберігаємо результат в кеші
        cache[n] = fibonacci(n - 1) + fibonacci(n - 2)
        
        # Повертаємо обчислене значення для n
        return cache[n]

    # Повертаємо функцію fibonacci як результат виклику caching_fibonacci
    return fibonacci


# Приклад використання
print("\n================================ ЗАВДАННЯ 1 ======================================\n")

# Створення екземпляру функції fibonacci з використанням кешування
fib = caching_fibonacci()

input = 10
print(f"Вхідний параметр для функції Фібоначі -  {input}; Результат виконання - {fib(input)}")
input = 15
print(f"Вхідний параметр для функції Фібоначі -  {input}; Результат виконання - {fib(input)}")


#----------------------------------------------------------------------------------------------------------------------



# ЗАВДАННЯ 2

# Необхідно створити функцію generator_numbers, яка буде аналізувати текст, ідентифікувати всі дійсні числа, що вважаються частинами доходів, і повертати їх як генератор.
# Дійсні числа у тексті записані без помилок, чітко відокремлені пробілами з обох боків. Також потрібно реалізувати функцію sum_profit, яка буде використовувати generator_numbers 
# для підсумовування цих чисел і обчислення загального прибутку.

import re

# Визначаємо функцію generator_numbers, яка приймає рядок як аргумент
def generator_numbers(text: str):
    # Використовуємо регулярний вираз для пошуку всіх дійсних чисел у тексті
    # Дійсні числа мають бути чітко відокремлені пробілами з обох боків
    # Регулярний вираз має враховувати можливість наявності десяткової крапки
    pattern = r"\b\d+\.?\d+\b"

    # Застосовуємо регулярний вираз до тексту і отримуємо список всіх збігів
    matches = re.findall(pattern, text)

    # Проходимо по списку збігів і повертаємо кожне число як генератор
    for match in matches:
        # Конвертуємо рядок у число з плаваючою крапкою
        number = float(match)
        # Використовуємо yield для створення генератора
        yield number

# Визначаємо функцію sum_profit, яка приймає рядок і функцію як аргументи
def sum_profit(text: str, func):
    # Використовуємо функцію generator_numbers для отримання генератора чисел у тексті
    numbers = func(text)
    # Ініціалізуємо змінну для зберігання загальної суми
    total = 0
    # Проходимо по генератору чисел і додаємо кожне число до загальної суми
    for number in numbers:
        total += number
    # Повертаємо загальну суму як результат функції
    return total


# Приклад використання
print("\n================================ ЗАВДАННЯ 2 ======================================\n")
text = "Загальний дохід працівника складається з декількох частин: 1000.01 як основний дохід, доповнений додатковими надходженнями 27.45 і 324.00 доларів."
print(text)
total_income = sum_profit(text, generator_numbers)
print(f"Загальний дохід: {total_income}")